# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
}

input DocumentFilter {
  page: PageFilter
  global: GlobalFilter
  blog: BlogFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Global | Blog | Folder

type PageHeroCta {
  text: String
  href: String
}

type PageHeroStats {
  value: String
  label: String
}

type PageHero {
  badge: String
  title: String
  subtitle: String
  cta: PageHeroCta
  stats: [PageHeroStats]
}

type PageServicesServiceCardsFeatures {
  feature: String
}

type PageServicesServiceCards {
  title: String
  description: String
  icon: String
  features: [PageServicesServiceCardsFeatures]
  price: String
}

type PageServices {
  badge: String
  title: String
  subtitle: String
  serviceCards: [PageServicesServiceCards]
}

type PageAbout {
  title: String
  content: JSON
}

type PageContactForm {
  nameLabel: String
  emailLabel: String
  messageLabel: String
  submitText: String
}

type PageContact {
  title: String
  subtitle: String
  form: PageContactForm
}

type PageMission {
  title: String
  content: JSON
}

type PageValuesValueList {
  title: String
  description: String
}

type PageValues {
  title: String
  valueList: [PageValuesValueList]
}

type PageTeamTeamMembers {
  name: String
  role: String
  bio: String
}

type PageTeam {
  title: String
  teamMembers: [PageTeamTeamMembers]
}

type Page implements Node & Document {
  title: String!
  description: String
  hero: PageHero
  services: PageServices
  about: PageAbout
  contact: PageContact
  mission: PageMission
  values: PageValues
  team: PageTeam
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageHeroCtaFilter {
  text: StringFilter
  href: StringFilter
}

input PageHeroStatsFilter {
  value: StringFilter
  label: StringFilter
}

input PageHeroFilter {
  badge: StringFilter
  title: StringFilter
  subtitle: StringFilter
  cta: PageHeroCtaFilter
  stats: PageHeroStatsFilter
}

input PageServicesServiceCardsFeaturesFilter {
  feature: StringFilter
}

input PageServicesServiceCardsFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
  features: PageServicesServiceCardsFeaturesFilter
  price: StringFilter
}

input PageServicesFilter {
  badge: StringFilter
  title: StringFilter
  subtitle: StringFilter
  serviceCards: PageServicesServiceCardsFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageAboutFilter {
  title: StringFilter
  content: RichTextFilter
}

input PageContactFormFilter {
  nameLabel: StringFilter
  emailLabel: StringFilter
  messageLabel: StringFilter
  submitText: StringFilter
}

input PageContactFilter {
  title: StringFilter
  subtitle: StringFilter
  form: PageContactFormFilter
}

input PageMissionFilter {
  title: StringFilter
  content: RichTextFilter
}

input PageValuesValueListFilter {
  title: StringFilter
  description: StringFilter
}

input PageValuesFilter {
  title: StringFilter
  valueList: PageValuesValueListFilter
}

input PageTeamTeamMembersFilter {
  name: StringFilter
  role: StringFilter
  bio: StringFilter
}

input PageTeamFilter {
  title: StringFilter
  teamMembers: PageTeamTeamMembersFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  hero: PageHeroFilter
  services: PageServicesFilter
  about: PageAboutFilter
  contact: PageContactFilter
  mission: PageMissionFilter
  values: PageValuesFilter
  team: PageTeamFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type GlobalSiteNavigationLinks {
  label: String
  href: String
}

type GlobalSiteNavigation {
  links: [GlobalSiteNavigationLinks]
}

type GlobalSiteFooter {
  content: JSON
}

type GlobalSite {
  logoText: String
  navigation: GlobalSiteNavigation
  footer: GlobalSiteFooter
}

type Global implements Node & Document {
  site: GlobalSite
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalSiteNavigationLinksFilter {
  label: StringFilter
  href: StringFilter
}

input GlobalSiteNavigationFilter {
  links: GlobalSiteNavigationLinksFilter
}

input GlobalSiteFooterFilter {
  content: RichTextFilter
}

input GlobalSiteFilter {
  logoText: StringFilter
  navigation: GlobalSiteNavigationFilter
  footer: GlobalSiteFooterFilter
}

input GlobalFilter {
  site: GlobalSiteFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Blog implements Node & Document {
  title: String!
  description: String
  date: String
  featuredImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogFilter {
  title: StringFilter
  description: StringFilter
  date: DatetimeFilter
  featuredImage: ImageFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
}

input DocumentUpdateMutation {
  page: PageMutation
  global: GlobalMutation
  blog: BlogMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  global: GlobalMutation
  blog: BlogMutation
}

input PageHeroCtaMutation {
  text: String
  href: String
}

input PageHeroStatsMutation {
  value: String
  label: String
}

input PageHeroMutation {
  badge: String
  title: String
  subtitle: String
  cta: PageHeroCtaMutation
  stats: [PageHeroStatsMutation]
}

input PageServicesServiceCardsFeaturesMutation {
  feature: String
}

input PageServicesServiceCardsMutation {
  title: String
  description: String
  icon: String
  features: [PageServicesServiceCardsFeaturesMutation]
  price: String
}

input PageServicesMutation {
  badge: String
  title: String
  subtitle: String
  serviceCards: [PageServicesServiceCardsMutation]
}

input PageAboutMutation {
  title: String
  content: JSON
}

input PageContactFormMutation {
  nameLabel: String
  emailLabel: String
  messageLabel: String
  submitText: String
}

input PageContactMutation {
  title: String
  subtitle: String
  form: PageContactFormMutation
}

input PageMissionMutation {
  title: String
  content: JSON
}

input PageValuesValueListMutation {
  title: String
  description: String
}

input PageValuesMutation {
  title: String
  valueList: [PageValuesValueListMutation]
}

input PageTeamTeamMembersMutation {
  name: String
  role: String
  bio: String
}

input PageTeamMutation {
  title: String
  teamMembers: [PageTeamTeamMembersMutation]
}

input PageMutation {
  title: String
  description: String
  hero: PageHeroMutation
  services: PageServicesMutation
  about: PageAboutMutation
  contact: PageContactMutation
  mission: PageMissionMutation
  values: PageValuesMutation
  team: PageTeamMutation
}

input GlobalSiteNavigationLinksMutation {
  label: String
  href: String
}

input GlobalSiteNavigationMutation {
  links: [GlobalSiteNavigationLinksMutation]
}

input GlobalSiteFooterMutation {
  content: JSON
}

input GlobalSiteMutation {
  logoText: String
  navigation: GlobalSiteNavigationMutation
  footer: GlobalSiteFooterMutation
}

input GlobalMutation {
  site: GlobalSiteMutation
}

input BlogMutation {
  title: String
  description: String
  date: String
  featuredImage: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
