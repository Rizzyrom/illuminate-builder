//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  global: Global;
  globalConnection: GlobalConnection;
  page: Page;
  pageConnection: PageConnection;
  blog: Blog;
  blogConnection: BlogConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};

export type DocumentFilter = {
  global?: InputMaybe<GlobalFilter>;
  page?: InputMaybe<PageFilter>;
  blog?: InputMaybe<BlogFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Global | Page | Blog | Folder;

export type GlobalSiteNavigationLinks = {
  __typename?: 'GlobalSiteNavigationLinks';
  label?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
};

export type GlobalSiteNavigation = {
  __typename?: 'GlobalSiteNavigation';
  links?: Maybe<Array<Maybe<GlobalSiteNavigationLinks>>>;
};

export type GlobalSiteFooter = {
  __typename?: 'GlobalSiteFooter';
  content?: Maybe<Scalars['JSON']['output']>;
};

export type GlobalSite = {
  __typename?: 'GlobalSite';
  title?: Maybe<Scalars['String']['output']>;
  logoText?: Maybe<Scalars['String']['output']>;
  contactEmail?: Maybe<Scalars['String']['output']>;
  navigation?: Maybe<GlobalSiteNavigation>;
  footer?: Maybe<GlobalSiteFooter>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  site?: Maybe<GlobalSite>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type GlobalSiteNavigationLinksFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type GlobalSiteNavigationFilter = {
  links?: InputMaybe<GlobalSiteNavigationLinksFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlobalSiteFooterFilter = {
  content?: InputMaybe<RichTextFilter>;
};

export type GlobalSiteFilter = {
  title?: InputMaybe<StringFilter>;
  logoText?: InputMaybe<StringFilter>;
  contactEmail?: InputMaybe<StringFilter>;
  navigation?: InputMaybe<GlobalSiteNavigationFilter>;
  footer?: InputMaybe<GlobalSiteFooterFilter>;
};

export type GlobalFilter = {
  site?: InputMaybe<GlobalSiteFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type PageHeroStats = {
  __typename?: 'PageHeroStats';
  number?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

export type PageHeroCta = {
  __typename?: 'PageHeroCta';
  text?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
};

export type PageHero = {
  __typename?: 'PageHero';
  badge?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['JSON']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  stats?: Maybe<Array<Maybe<PageHeroStats>>>;
  cta?: Maybe<PageHeroCta>;
};

export type PageServicesServiceCards = {
  __typename?: 'PageServicesServiceCards';
  name?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type PageServices = {
  __typename?: 'PageServices';
  badge?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['JSON']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  serviceCards?: Maybe<Array<Maybe<PageServicesServiceCards>>>;
};

export type PageProcessSteps = {
  __typename?: 'PageProcessSteps';
  number?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type PageProcess = {
  __typename?: 'PageProcess';
  title?: Maybe<Scalars['JSON']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  steps?: Maybe<Array<Maybe<PageProcessSteps>>>;
};

export type PageAbout = {
  __typename?: 'PageAbout';
  title?: Maybe<Scalars['JSON']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
};

export type PageContactForm = {
  __typename?: 'PageContactForm';
  submitText?: Maybe<Scalars['String']['output']>;
  successMessage?: Maybe<Scalars['String']['output']>;
};

export type PageContact = {
  __typename?: 'PageContact';
  title?: Maybe<Scalars['JSON']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  form?: Maybe<PageContactForm>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  metaTitle?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<PageHero>;
  services?: Maybe<PageServices>;
  process?: Maybe<PageProcess>;
  about?: Maybe<PageAbout>;
  contact?: Maybe<PageContact>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageHeroStatsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type PageHeroCtaFilter = {
  text?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type PageHeroFilter = {
  badge?: InputMaybe<StringFilter>;
  title?: InputMaybe<RichTextFilter>;
  subtitle?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PageHeroStatsFilter>;
  cta?: InputMaybe<PageHeroCtaFilter>;
};

export type PageServicesServiceCardsFilter = {
  name?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
};

export type PageServicesFilter = {
  badge?: InputMaybe<StringFilter>;
  title?: InputMaybe<RichTextFilter>;
  subtitle?: InputMaybe<StringFilter>;
  serviceCards?: InputMaybe<PageServicesServiceCardsFilter>;
};

export type PageProcessStepsFilter = {
  number?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PageProcessFilter = {
  title?: InputMaybe<RichTextFilter>;
  subtitle?: InputMaybe<StringFilter>;
  steps?: InputMaybe<PageProcessStepsFilter>;
};

export type PageAboutFilter = {
  title?: InputMaybe<RichTextFilter>;
  content?: InputMaybe<RichTextFilter>;
};

export type PageContactFormFilter = {
  submitText?: InputMaybe<StringFilter>;
  successMessage?: InputMaybe<StringFilter>;
};

export type PageContactFilter = {
  title?: InputMaybe<RichTextFilter>;
  subtitle?: InputMaybe<StringFilter>;
  form?: InputMaybe<PageContactFormFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  hero?: InputMaybe<PageHeroFilter>;
  services?: InputMaybe<PageServicesFilter>;
  process?: InputMaybe<PageProcessFilter>;
  about?: InputMaybe<PageAboutFilter>;
  contact?: InputMaybe<PageContactFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  author?: Maybe<Scalars['String']['output']>;
  featuredImage?: Maybe<Scalars['String']['output']>;
  excerpt?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
  categories?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  seoTitle?: Maybe<Scalars['String']['output']>;
  seoDescription?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<StringFilter>;
  featuredImage?: InputMaybe<ImageFilter>;
  excerpt?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  categories?: InputMaybe<StringFilter>;
  seoTitle?: InputMaybe<StringFilter>;
  seoDescription?: InputMaybe<StringFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateGlobal: Global;
  createGlobal: Global;
  updatePage: Page;
  createPage: Page;
  updateBlog: Blog;
  createBlog: Blog;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};

export type DocumentUpdateMutation = {
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  blog?: InputMaybe<BlogMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  blog?: InputMaybe<BlogMutation>;
};

export type GlobalSiteNavigationLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalSiteNavigationMutation = {
  links?: InputMaybe<Array<InputMaybe<GlobalSiteNavigationLinksMutation>>>;
};

export type GlobalSiteFooterMutation = {
  content?: InputMaybe<Scalars['JSON']['input']>;
};

export type GlobalSiteMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  logoText?: InputMaybe<Scalars['String']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  navigation?: InputMaybe<GlobalSiteNavigationMutation>;
  footer?: InputMaybe<GlobalSiteFooterMutation>;
};

export type GlobalMutation = {
  site?: InputMaybe<GlobalSiteMutation>;
};

export type PageHeroStatsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type PageHeroCtaMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type PageHeroMutation = {
  badge?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['JSON']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PageHeroStatsMutation>>>;
  cta?: InputMaybe<PageHeroCtaMutation>;
};

export type PageServicesServiceCardsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageServicesMutation = {
  badge?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['JSON']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  serviceCards?: InputMaybe<Array<InputMaybe<PageServicesServiceCardsMutation>>>;
};

export type PageProcessStepsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PageProcessMutation = {
  title?: InputMaybe<Scalars['JSON']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  steps?: InputMaybe<Array<InputMaybe<PageProcessStepsMutation>>>;
};

export type PageAboutMutation = {
  title?: InputMaybe<Scalars['JSON']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageContactFormMutation = {
  submitText?: InputMaybe<Scalars['String']['input']>;
  successMessage?: InputMaybe<Scalars['String']['input']>;
};

export type PageContactMutation = {
  title?: InputMaybe<Scalars['JSON']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<PageContactFormMutation>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<PageHeroMutation>;
  services?: InputMaybe<PageServicesMutation>;
  process?: InputMaybe<PageProcessMutation>;
  about?: InputMaybe<PageAboutMutation>;
  contact?: InputMaybe<PageContactMutation>;
};

export type BlogMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  featuredImage?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  seoTitle?: InputMaybe<Scalars['String']['input']>;
  seoDescription?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalPartsFragment = { __typename: 'Global', site?: { __typename: 'GlobalSite', title?: string | null, logoText?: string | null, contactEmail?: string | null, navigation?: { __typename: 'GlobalSiteNavigation', links?: Array<{ __typename: 'GlobalSiteNavigationLinks', label?: string | null, href?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalSiteFooter', content?: any | null } | null } | null };

export type PagePartsFragment = { __typename: 'Page', title: string, metaTitle?: string | null, metaDescription?: string | null, hero?: { __typename: 'PageHero', badge?: string | null, title?: any | null, subtitle?: string | null, stats?: Array<{ __typename: 'PageHeroStats', number?: string | null, label?: string | null } | null> | null, cta?: { __typename: 'PageHeroCta', text?: string | null, href?: string | null } | null } | null, services?: { __typename: 'PageServices', badge?: string | null, title?: any | null, subtitle?: string | null, serviceCards?: Array<{ __typename: 'PageServicesServiceCards', name?: string | null, subtitle?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null } | null, process?: { __typename: 'PageProcess', title?: any | null, subtitle?: string | null, steps?: Array<{ __typename: 'PageProcessSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null } | null, about?: { __typename: 'PageAbout', title?: any | null, content?: any | null } | null, contact?: { __typename: 'PageContact', title?: any | null, subtitle?: string | null, form?: { __typename: 'PageContactForm', submitText?: string | null, successMessage?: string | null } | null } | null };

export type BlogPartsFragment = { __typename: 'Blog', title: string, date: string, author?: string | null, featuredImage?: string | null, excerpt?: string | null, content?: any | null, categories?: Array<string | null> | null, seoTitle?: string | null, seoDescription?: string | null };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, site?: { __typename: 'GlobalSite', title?: string | null, logoText?: string | null, contactEmail?: string | null, navigation?: { __typename: 'GlobalSiteNavigation', links?: Array<{ __typename: 'GlobalSiteNavigationLinks', label?: string | null, href?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalSiteFooter', content?: any | null } | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, site?: { __typename: 'GlobalSite', title?: string | null, logoText?: string | null, contactEmail?: string | null, navigation?: { __typename: 'GlobalSiteNavigation', links?: Array<{ __typename: 'GlobalSiteNavigationLinks', label?: string | null, href?: string | null } | null> | null } | null, footer?: { __typename: 'GlobalSiteFooter', content?: any | null } | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, metaTitle?: string | null, metaDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PageHero', badge?: string | null, title?: any | null, subtitle?: string | null, stats?: Array<{ __typename: 'PageHeroStats', number?: string | null, label?: string | null } | null> | null, cta?: { __typename: 'PageHeroCta', text?: string | null, href?: string | null } | null } | null, services?: { __typename: 'PageServices', badge?: string | null, title?: any | null, subtitle?: string | null, serviceCards?: Array<{ __typename: 'PageServicesServiceCards', name?: string | null, subtitle?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null } | null, process?: { __typename: 'PageProcess', title?: any | null, subtitle?: string | null, steps?: Array<{ __typename: 'PageProcessSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null } | null, about?: { __typename: 'PageAbout', title?: any | null, content?: any | null } | null, contact?: { __typename: 'PageContact', title?: any | null, subtitle?: string | null, form?: { __typename: 'PageContactForm', submitText?: string | null, successMessage?: string | null } | null } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, metaTitle?: string | null, metaDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PageHero', badge?: string | null, title?: any | null, subtitle?: string | null, stats?: Array<{ __typename: 'PageHeroStats', number?: string | null, label?: string | null } | null> | null, cta?: { __typename: 'PageHeroCta', text?: string | null, href?: string | null } | null } | null, services?: { __typename: 'PageServices', badge?: string | null, title?: any | null, subtitle?: string | null, serviceCards?: Array<{ __typename: 'PageServicesServiceCards', name?: string | null, subtitle?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null } | null, process?: { __typename: 'PageProcess', title?: any | null, subtitle?: string | null, steps?: Array<{ __typename: 'PageProcessSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null } | null, about?: { __typename: 'PageAbout', title?: any | null, content?: any | null } | null, contact?: { __typename: 'PageContact', title?: any | null, subtitle?: string | null, form?: { __typename: 'PageContactForm', submitText?: string | null, successMessage?: string | null } | null } | null } | null } | null> | null } };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, title: string, date: string, author?: string | null, featuredImage?: string | null, excerpt?: string | null, content?: any | null, categories?: Array<string | null> | null, seoTitle?: string | null, seoDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, title: string, date: string, author?: string | null, featuredImage?: string | null, excerpt?: string | null, content?: any | null, categories?: Array<string | null> | null, seoTitle?: string | null, seoDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  __typename
  site {
    __typename
    title
    logoText
    contactEmail
    navigation {
      __typename
      links {
        __typename
        label
        href
      }
    }
    footer {
      __typename
      content
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  metaTitle
  metaDescription
  hero {
    __typename
    badge
    title
    subtitle
    stats {
      __typename
      number
      label
    }
    cta {
      __typename
      text
      href
    }
  }
  services {
    __typename
    badge
    title
    subtitle
    serviceCards {
      __typename
      name
      subtitle
      description
      features
    }
  }
  process {
    __typename
    title
    subtitle
    steps {
      __typename
      number
      title
      description
    }
  }
  about {
    __typename
    title
    content
  }
  contact {
    __typename
    title
    subtitle
    form {
      __typename
      submitText
      successMessage
    }
  }
}
    `;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  title
  date
  author
  featuredImage
  excerpt
  content
  categories
  seoTitle
  seoDescription
}
    `;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  